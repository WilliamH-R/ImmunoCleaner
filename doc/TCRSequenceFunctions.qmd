---
title: "Exploring CD8+ T-cell Specificities using Single Cell Immune Profiling with an Outlook to Reproducible Bio Data Science"
author: "William Hagedorn-Rasmussen"
format: html
toc: true
number-sections: true
crossref:
  chapters: true
csl: citation_style.csl
bibliography: bachelor_references.bib
---

# Imports

```{r setup}
library(TCRSequenceFunctions)
```

# Introduction

This package, [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions), is a collection of functions made for working with data sets from a Single Cell Immune Profiling experiment made by 10x Genomics @10XGenomics2022. There is a total of four data sets which all follow the same general structure. They differ in that, they contain data from each their own respective donor.

The data sets contains binding counts between the donors' library of T-Cell Receptors (TCRs) and a set of peptide-major histocompatibility complexes (pMHCs). The before-mentioned binding counts are so called unique molecular identifier (UMI) counts. For an explanation of all columns see @sec-AppendixA.

In the following sections, each of the functions contained in [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions) will be explained, demonstrated and reasoned for. Generally, they can be divided into three types: Cleaning, Augmenting and Modelling where the main goal of the two first is to make the data tidy.

Lastly will be a short section on a Shiny Package, [TCRSequenceShiny](https://github.com/WilliamH-R/TCRSequenceShiny), which utilizes these functions to make a user-friendly interactive interface for data exploration.

# Tidying the data

The aim of tidying the data is to enable the data handling, and to ensure a reproducible result. Firstly, the data is cleaned e.g. by making sure, all cells only contain one piece of information. After, some augmented was needed to enable the modelling. This was done by e.g. adding new columns. A wrapper function was used to run all the preparation functions: `run_all_prep()`. This wrapper simply takes one of the raw data files included in the package as input, and pipe it through all the preparation functions, and output tidy data as in @tbl-clean_data:

```{r}
#| echo: false
#| label: tbl-clean_data

data_donor_one_raw %>% 
  run_all_prep() %>% 
  knitr::kable(format = "markdown")


```

## Cleaning

The list of cleaning functions are as follows:

1.  `remove_unnecessary_columns()`
2.  `split_TCR_sequences_find_non_promiscuous()`
3.  `pivot_longer_TCR_sequences()`
4.  `add_chain_ident_remove_prefix()`
5.  `pivot_longer_pMHC()`
6.  `tidy_pMHC_names()`

## Augmenting

1.  `add_max_non_specific_binder()`
2.  `evaluate_binder()`
3.  `add_TCR_combination_identifier()`

# Modelling

# Shiny Integration

# References {.unnumbered}

# Appendix

## Appendix A {#sec-AppendixA}
