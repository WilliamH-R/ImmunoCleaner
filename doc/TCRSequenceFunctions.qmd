---
title: "Exploring CD8+ T-cell Specificities using Single Cell Immune Profiling with an Outlook to Reproducible Bio Data Science"
author: "William Hagedorn-Rasmussen"
toc: true
number-sections: true
crossref:
  chapters: true
csl: citation_style.csl
bibliography: bachelor_references.bib
editor: visual
always_allow_html: true
format: html
  #pdf:
   # include-in-header:
    #  text: |
     #  \usepackage[font=footnotesize,labelfont=bf,textfont=it]{caption}
---

{{< pagebreak >}}

# Imports {#sec-Import}

```{r setup}
library(TCRSequenceFunctions)
library(gt)
load("../R/sysdata.rda")
```

# Introduction {#sec-Intro}

This package, [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions), is a collection of functions made for working with data sets from a Single Cell Immune Profiling experiment made by 10x Genomics @10XGenomics2022. There is a total of four data sets which all follow the same general structure. They differ in that, they contain data from each their respective donor.

The data sets contain binding counts between the donors' library of T-Cell Receptors (TCRs) and a set of peptide-major histocompatibility complexes (pMHCs). The before-mentioned binding counts are so called unique molecular identifier (UMI) counts. For an explanation of all columns see @sec-AppendixA.

In the following sections, each of the functions contained in [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions) will be explained, demonstrated and reasoned for. Generally, they can be divided into three types: Cleaning, Augmenting and Modelling where the main goal of the two first is to make the data tidy.

Lastly will be a short section on a Shiny Package, [TCRSequenceShiny](https://github.com/WilliamH-R/TCRSequenceShiny), which utilizes these functions to make a user-friendly interactive interface for data filtering and exploration.

# Data curation {#sec-DataCuration}

In the folder `"data-raw"` is four files located:

1.  `01data_download_raw.R`
2.  `02data_combined_tidy.R`
3.  `03data_generate_umap_models.R`
4.  `aux_alleles_status_each_dono.R`

The purpose of the first script is to simply download the raw data sets from 10x Genomics and store them internally. The second script then tidies the data and combine them to `data_combined_tidy` by running a wrapper function - `run_all_prep()` which will be described in @sec-CleaningData. Number three of the scripts generates a UMAP-model for each donor and stores them in some data files, to be later used by a function to plot. This is described in more detail in @sec-umap_of_protein_expressions. Finally, the last script is a static file containing the HLA-typings and virus statuses of all four donors.

# Tidying the data {#sec-TidyData}

The aim of tidying the data is to enable the data handling/modelling, and to ensure a reproducible result. Firstly, the data is cleaned e.g. by making sure, all cells only contain one piece of information. Afterwards, some augmentation was needed to enable the modelling. This was done by e.g. adding new columns. A wrapper function was used to run all the preparation functions: `run_all_prep()`. This wrapper simply takes all the internally stored raw data files as input, and pipe it through all the preparation functions, and output tidy data. Then the data is exported. The process is showed in @lst-tidydata_pipeline.

``` {#lst-tidydata_pipeline .R lst-cap="How to update tidy data"}
# Downloading and internalising raw data
data_donor_one_raw <-
  readr::read_csv(url("https://cf.10xgenomics.com/samples/cell-vdj/3.0.2/vdj_v1_hs_aggregated_donor1/vdj_v1_hs_aggregated_donor1_binarized_matrix.csv"),
                  show_col_types = FALSE)

data_donor_two_raw <-
  readr::read_csv(url("https://cf.10xgenomics.com/samples/cell-vdj/3.0.2/vdj_v1_hs_aggregated_donor2/vdj_v1_hs_aggregated_donor2_binarized_matrix.csv"),
                  show_col_types = FALSE)

data_donor_three_raw <-
  readr::read_csv(url("https://cf.10xgenomics.com/samples/cell-vdj/3.0.2/vdj_v1_hs_aggregated_donor3/vdj_v1_hs_aggregated_donor3_binarized_matrix.csv"),
                  show_col_types = FALSE)

data_donor_four_raw <-
  readr::read_csv(url("https://cf.10xgenomics.com/samples/cell-vdj/3.0.2/vdj_v1_hs_aggregated_donor4/vdj_v1_hs_aggregated_donor4_binarized_matrix.csv"),
                  show_col_types = FALSE)

usethis::use_data(data_donor_one_raw,
                  data_donor_two_raw,
                  data_donor_three_raw,
                  data_donor_four_raw,
                  overwrite = TRUE,
                  internal = TRUE)

# Tidying and exporting data
load("R/sysdata.rda")

data_combined_tidy <- dplyr::bind_rows(data_donor_one_raw,
                                       data_donor_two_raw,
                                       data_donor_three_raw,
                                       data_donor_four_raw) %>%
  run_all_prep()

usethis::use_data(data_combined_tidy,
                  overwrite = TRUE)
```

## Cleaning {#sec-CleaningData}

As mentioned above, cleaning the data is mostly focusing on handling already present data and/or re-structure the data frame. The list of cleaning functions are as follows:

1.  `remove_unnecessary_columns()`
2.  `find_non_promiscuous_split_TCR_sequences()`
3.  `pivot_longer_TCR_sequences()`
4.  `add_chain_ident_remove_prefix()`
5.  `pivot_longer_pMHC()`
6.  `tidy_pMHC_names()`

The first function takes the raw data frame as input, and simply removes the unnecessary columns as these aren't needed. By default, the columns removed are those containing `"_binder"` and the column `"cell_clono_cdr3_nt"`.

`find_non_promiscuous_split_TCR_sequences()`, `pivot_longer_TCR_sequence()` and `add_chain_ident_remove_prefix()` works in close relation with one another. The main purpose is to tidy the TCR-sequences, as to not have cells with multiple pieces of information. @tbl-TCR_sequence_example_before shows three non-tidy examples. A column is added to indicate a non-promiscuous pair (i.e., a pair with one alpha- and beta chain respectively) and contains the TCR-sequence of said pair. This is done since the sequences of non-promiscuous pairs are needed for modelling in @sec-relevant_binder_frequency_plot. The TCR-sequences are then split into new columns, one for each chain. These new columns are then pivot longer into the column `TCR_sequence` by `pivot_longer_TCR_sequence()`. Lastly, a new column is added to indicate chain type, `chain`, and the chain indicator `"TR[A|B]"` is removed. The result can be seen in @tbl-TCR_sequence_example_after.

| **cell_clono_cdr3_aa**                                         |
|----------------------------------------------------------------|
| TRA:CAASVSIWTGTASKLTF;TRA:CAAWDMEYGNKLVF;TRB:CAISDPGLAGGGGEQFF |
| TRB:CASDTPVGQFF                                                |
| TRA:CASYTDKLIF;TRB:CASSGGSISTDTQYF                             |

: {#tbl-TCR_sequence_example_before}

| **TCR_sequence**  | **chain** | **non_promiscuous_pair**   |
|-------------------|-----------|----------------------------|
| CAASVSIWTGTASKLTF | alpha     | NA                         |
| CAAWDMEYGNKLVF    | alpha     | NA                         |
| CAISDPGLAGGGGEQFF | beta      | NA                         |
| CASDTPVGQFF       | beta      | NA                         |
| CASYTDKLIF        | alpha     | CASYTDKLIF;CASSGGSISTDTQYF |
| CASSGGSISTDTQYF   | beta      | CASYTDKLIF;CASSGGSISTDTQYF |

: {#tbl-TCR_sequence_example_after}

All columns names following the general structure `"allele_peptide_peptide-source"` is also pivot longer and split to have the data available in cells and only one piece of information in each cell. This is done through `pivot_longer_pMHC()` and `tidy_pMHC_names()`. First the names are pivot longer with their associated UMI-counts as values. Here, only non-zero values are kept as they are otherwise irrelevant. The names, now as rows, are made tidy by splitting into three new columns:

1.  `allele`

2.  `peptide`

3.  `peptide_source`

This step is important as to not have multiple pieces of information in one cell, and as they are used for modelling in @sec-summarise_with_filter.

## Augmenting {#sec-AugmentingData}

Generally speaking, augmenting the data refers to adding new columns which enable later modelling. In some cases, it makes more sense to do augmenting while cleaning (e.g. `find_non_promiscuous_split_TCR_sequences()`). The list of augmenting functions are as follows:

1.  `add_max_negative_control_binder()`
2.  `evaluate_binder()`
3.  `add_TCR_combination_identifier()`
4.  `check_if_HLA_match()`
5.  `find_unique_binders()`

The first and second function are both required to find the relevant binders. A relevant binding event has four requirements which needs to be met:

1.  UMI-count needs to be larger than some threshold
2.  The UMI-count has to be another threshold times higher than the negative control with the highest UMI-count for that barcode
3.  If multiple relevant binders exist for a barcode (cell), only use the one with the highest UMI-count
4.  Disregard a entire barcode if it shows to be relevant towards more than four pMHC

And so, the purpose of the first function is to find the highest UMI-count of all negative controls for each barcode. The count is added in a new column called `max_negative_control_binder`. The second function then uses the above mentioned requirements to evaluate all binding events. The evaluation is used in e.g. @sec-relevant_binder_frequency_plot. Some examples of evaluation can be seen in @tbl-binder_evaluation.

```{r}
#| echo: false
#| label: tbl-binder_evaluation
#| tbl-cap: "Examples of how different combinations of UMI-count and max_negative_control_binder are evaluated to either `TRUE` or `FALSE`"

data_combined_tidy %>% 
  dplyr::group_by(is_binder) %>% 
  dplyr::slice_head(n = 3) %>% 
  dplyr::select(pMHC,
                UMI_count,
                max_negative_control_binder,
                is_binder) %>% 
  gt(rowname_col = "pMHC") %>% 
  cols_label(
    UMI_count = md("**UMI_count**"),
    max_negative_control_binder = md("**max_negative_control_binder**"),
    is_binder = md("**is_binder**")
  ) %>% 
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_body(
      columns = everything()
    )
  )
```

`add_TCR_combination_identifier()` categorizes the TCR-sequence chain combinations for each barcode. I.e. it determines which of the following groups the TCR-sequence for a barcode belongs to:

1.  Containing only one alpha chain and no beta chains
2.  Containing no alpha chain and only one beta chain
3.  Containing one alpha chain and beta chain respectively
4.  Some other combination

This allows for a distribution of the above-mentioned categories to perform a quick check on the data through @sec-alpha_beta_pair_distribution. A few examples can be seen in @tbl-chain_categorizing.

```{r}
#| echo: false
#| label: tbl-chain_categorizing
#| tbl-cap: "Examples of how barcodes are categorized depending on their alpha- and beta chain combination"

data_combined_tidy %>%
  dplyr::slice_head(n = 11) %>% 
  dplyr::select(barcode,
                chain,
                TCR_combination) %>% 
  gt() %>%
  cols_label(
    barcode = md("**barcode**"),
    chain = md("**chain**"),
    TCR_combination = md("**TCR_combination**")
  ) %>% 
  cols_align(
    align = "center",
    columns = TCR_combination
  ) %>% 
  tab_options(table.width = pct(80))
```

For data filtering and -modelling, it would be interesting to check if a donors' cells also binds pMHCs which is outside of the donors' HLA-typings. This is done through `check_if_HLA_match()` by comparing the allele noted in the column `allele` to a static table provided by 10x Genomics @10XGenomics2022. If the alleles match, the new column `HLA_match()` will contain `"TRUE"`. In some cases, only one typing is known, and it's not known whether the donor is heterozygous or homozygous. You can't explicitly determine an allele not present in the typing to be `"FALSE"`, as the true secondary typing is not known. The solution is to determine such a case as `"UNKNOWN"` instead.

Lastly, `find_unique_binders()` is meant to find unique combinations of `TCR-sequence` and `pMHC`. If the binding event is evaluated to be relevant, but only observed once in a data set, the support is very low. The function then adds a column `unique_binder` to enable filtering, as it would make sense to have the option to filter out these observations.

## Change of dimensions

Naturally, the dimensions of all included data sets change after being piped through `run_all_prep()`. @tbl-dimensions shows the dimensions for both the raw and tidy data sets stratified on donor. The number of columns are always reduced to 29, but the number of rows depend on the original number of rows and the data itself.

::: {#tbl-dimensions layout-ncol="2"}
|      **Donor 1**      |          **`raw`**           |                            **`tidy`**                             |
|:------------------:|:------------------------:|:-------------------------:|
| **Number of columns** | `r ncol(data_donor_one_raw)` | `r ncol(data_combined_tidy %>% dplyr::filter(donor == "donor1"))` |
|  **Number of rows**   | `r nrow(data_donor_one_raw)` | `r nrow(data_combined_tidy %>% dplyr::filter(donor == "donor1"))` |

: {#tbl-dimensions_donor_one}

|      **Donor 2**      |          **`raw`**           |                            **`tidy`**                             |
|:------------------:|:------------------------:|:-------------------------:|
| **Number of columns** | `r ncol(data_donor_two_raw)` | `r ncol(data_combined_tidy %>% dplyr::filter(donor == "donor2"))` |
|  **Number of rows**   | `r nrow(data_donor_two_raw)` | `r nrow(data_combined_tidy %>% dplyr::filter(donor == "donor2"))` |

: {#tbl-dimensions_donor_two}

|      **Donor 3**      |           **`raw`**            |                            **`tidy`**                             |
|:-----------------:|:------------------------:|:-------------------------:|
| **Number of columns** | `r ncol(data_donor_three_raw)` | `r ncol(data_combined_tidy %>% dplyr::filter(donor == "donor3"))` |
|  **Number of rows**   | `r nrow(data_donor_three_raw)` | `r nrow(data_combined_tidy %>% dplyr::filter(donor == "donor3"))` |

: {#tbl-dimensions_donor_three}

|      **Donor 4**      |           **`raw`**           |                            **`tidy`**                             |
|:------------------:|:------------------------:|:-------------------------:|
| **Number of columns** | `r ncol(data_donor_four_raw)` | `r ncol(data_combined_tidy %>% dplyr::filter(donor == "donor4"))` |
|  **Number of rows**   | `r nrow(data_donor_four_raw)` | `r nrow(data_combined_tidy %>% dplyr::filter(donor == "donor4"))` |

: {#tbl-dimensions_donor_four}

Dimensions of data sets for **(a)** Donor 1, **(b)** Donor 2, **(c)** Donor 3 and **(d)** Donor 4 before and after being prepared by the wrapper `run_all_prep()`
:::

::: {layout-ncol="2"}
|      **Donor 1**      |          **`raw`**           |
|:---------------------:|:----------------------------:|
| **Number of columns** | `r ncol(data_donor_one_raw)` |
|  **Number of rows**   | `r nrow(data_donor_one_raw)` |

: {#tbl-dimensions_donor_one}

|      **Donor 2**      |          **`raw`**           |
|:---------------------:|:----------------------------:|
| **Number of columns** | `r ncol(data_donor_two_raw)` |
|  **Number of rows**   | `r nrow(data_donor_two_raw)` |

: {#tbl-dimensions_donor_two}

|      **Donor 3**      |           **`raw`**            |
|:---------------------:|:------------------------------:|
| **Number of columns** | `r ncol(data_donor_three_raw)` |
|  **Number of rows**   | `r nrow(data_donor_three_raw)` |

: {#tbl-dimensions_donor_three}

|      **Donor 4**      |           **`raw`**           |
|:---------------------:|:-----------------------------:|
| **Number of columns** | `r ncol(data_donor_four_raw)` |
|  **Number of rows**   | `r nrow(data_donor_four_raw)` |

: {#tbl-dimensions_donor_four}

|     **Combined**      |          **`tidy`**          |
|:---------------------:|:----------------------------:|
| **Number of columns** | `r ncol(data_combined_tidy)` |
|  **Number of rows**   | `r nrow(data_combined_tidy)` |

: {#tbl-dimensions_combined_tidy}

Dimensions of data sets for **(a)** Donor 1, **(b)** Donor 2, **(c)** Donor 3 and **(d)** Donor 4 before being prepared by the wrapper `run_all_prep()`. **(e)** After being prepared by the wrapper `run_all_prep()` and combined.
:::

# Modelling {#sec-ModelData}

All of the tidying done in the above enables the modelling which are described in this section. For each model, a subsection is included to describe the purpose and the output of said models. The list of modeling functions are:

1.  `summarise_with_filter()`
2.  `relevant_binder_frequency_plot()`
3.  `alpha_beta_pair_distributions()`
4.  `alpha_beta_distinctiveness()`
5.  `count_binding_pr_allele()`
6.  `umap_of_protein_expressions()`
7.  `boxplot_protein_expressions()`

## `summarise_with_filter()` {#sec-summarise_with_filter}

As input, this function takes a tidy data frame. For each cell - barcode - it counts all of the relevant binding events stratified on a user input. The output is then a table with counts of the binding events. Through its arguments it's possible to decide the stratification as shown in @tbl-summarise_with_filter. From the output it is then apparent, that some alleles and peptides bind more often than others which could prove interesting.

```{r}
#| eval: false

data_combined_tidy %>%
  summarise_with_filter(summarise_by = c("allele", "peptide"))
```

```{r}
#| echo: false
#| label: tbl-summarise_with_filter
#| tbl-cap: "Output of the function `summarise_with_filter()`. For each allele and for each peptide a count as noted indicating the number of binding events to cells."

data_combined_tidy %>%
  dplyr::filter(donor %in% c("donor1", "donor2")) %>% 
  summarise_with_filter(summarise_by = c("allele", "peptide")) %>% 
  dplyr::slice_head(n = 10) %>% 
  gt() %>%
  cols_label(
    allele = md("**allele**"),
    peptide = md("**peptide**"),
  ) %>% 
  cols_align(
    align = "left",
    columns = everything()
  ) %>% 
  tab_options(
    heading.border.bottom.width = 10,
    table.width = pct(80)
  )
```

## `relevant_binder_frequency_plot()` {#sec-relevant_binder_frequency_plot}

As the function above, this also takes a tidy data frame as input. The model shows which pMHC have a relevant binding to which non-promiscuous pairs stratified on donor. From this model, the output is a plotly (i.e., interactive) plot where each dot represent a relevant binding event between pMHC and a non-promiscuous pair. For each specific relevant match between TCR-sequence and pMHC, the number of barcodes supporting that match was counted and used as size for the dots. Further, a concordance is calculated which represent the fraction of barcodes supporting a match out of all barcodes carrying that specific TCR-sequence.

The x-axis text have been disabled due to cluttering, but the values can be found by hovering a dot. It is important to mention, that only interactions evaluated to relevant by `evaluate_binder()` is included. Hence, a change of filtering will directly change the output of this function. Furthermore, it is possible to provide the function with a maximum frequency. If one is interested in only ambiguous sequences (i.e., TCR-sequences which bind multiple pMHC), the max frequency should be set to something lower than `1`. For a demonstration on how to use the model see @fig-relevant_binder_frequency_plot (will only work properly when rendering in HTML format).

```{r}
#| label: fig-relevant_binder_frequency_plot
#| fig-cap: "Output of the function `relevant_binder_frequency_plot`. Each dot represent a relevant binding between a non-promiscous TCR-sequence and pMHC."
#| fig-height: 15

data_combined_tidy %>%
  dplyr::filter(donor %in% c("donor1", "donor2")) %>% 
  relevant_binder_frequency_plot()
```

## `alpha_beta_pair_distribution()` {#sec-alpha_beta_pair_distribution}

As with the other model functions, it takes a tidy data frame as input. From `add_TCR_combination_identifier()` we have the categorization of each cell. By making each barcode unique, and counting number of occurrences for each category, a frequency distribution is obtainable. The output is a bar plot showing exactly that (see @fig-alpha_beta_pair_distribution). It can be used as a quality check of the data.

```{r}
#| label: fig-alpha_beta_pair_distribution
#| fig-cap: "Output of the function `alpha_beta_pair_distribution`. Each bar represent the freuqency of that respective category."

data_combined_tidy %>%
  alpha_beta_pair_distribution()
```

## `alpha_beta_distinctiveness()` {#sec-alpha_beta_sequence_consistency}

The input to the function is a tidy data frame from which a frequency plot is made. The function groups on the barcode, then make TCR-sequences unique, and ungroup again to do a data set wide counting of the number of TCR-sequences. A distinctiveness score is then calculated by comparing the number of completely unique sequences with the total number of TCR-sequences. I.e., a lower score means less distinctive. The calculations are done by stratifying on `chain`. This enables a quick quality check of the data set to whether it follows theory or not. The output is then a bar plot showing the distinctiveness score (see @fig-alpha_beta_distinctiveness).

```{r}
#| label: fig-alpha_beta_distinctiveness
#| fig-cap: "Output of the function `alpha_beta_distinctiveness()`. Each bar represent the distinctiveness of that chain type."

data_combined_tidy %>%
  alpha_beta_distinctiveness()
```

## `count_binding_pr_allele()` {#sec-count_binding_pr_allele}

By inputting a tidy data frame, a scatter plot is provided as output which shows number of relevant bindings for each allele. It is done by, for each barcode, making pMHC distinct, ungrouping and simply count the alleles. Is mentioned in @sec-AugmentingData, the possibility of `"UNKNOWN"` exist. This happens when a HLA-type of a donor is unknown, and the allele noted down for a binding event is not present in the typings. The output is then as shown in @fig-count_binding_pr_allele.

```{r}
#| label: fig-count_binding_pr_allele
#| fig-cap: "Output of the function `count_binding_pr_allele()`. The y-axis shows the count of relevant binders for each allele."
#| fig-width: 15

data_combined_tidy %>%
  count_binding_pr_allele()
```

## `umap_of_protein_expressions()` {#sec-umap_of_protein_expressions}

As mentioned in @sec-DataCuration a script has been made for generating a UMAP model for each donor. This is done by using the package `uwot`. It takes the protein expressions of all 11 proteins in the tidy data frame, and creates a model which reduces the dimension to 2D. This allows better visual representation of the tendencies by applying coloring.

The function `umap_of_protein_expressions()` loads the created models mentioned above and project the piped in data frame onto the model outputting a 2D scatter plot. By supplying a protein name present in the data as a string, it is possible to color by the expression of said protein. This allows us to tell which protein can explain the largest amount of variability in the expressions. In the examples shown in @fig-umap_of_protein_expressions it can be seen, that the protein CD45RA can explain a lot of the variability whereas the protein CD8a doesn't show any clear tendencies.

```{r}
#| label: fig-umap_of_protein_expressions
#| fig-cap: "Output of the function `umap_of_protein_expressions()`. The plots show the dimensionality reduction and how the variance is explained by the expressions levels of (a) CD45RA and (b) CD8a."
#| fig-subcap: true
#| layout-ncol: 2

# data_combined_tidy %>%
#   dplyr::filter(donor == "donor4") %>% 
#   umap_of_protein_expressions(color_by = "CD45RA")
#   
# data_combined_tidy %>%
#   dplyr::filter(donor == "donor4") %>% 
#   umap_of_protein_expressions(color_by = "CD8a")
```

## `boxplot_protein_expressions()` {#sec-boxplot_protein_expressions}

By supplying a tidy data frame and a protein name present in the data (with the default being CD4), the output will be boxplots showing the distribution of expression levels of the provided protein for each donor in the data. The boxplots contain the name of the donor on the x-axis and the `log10()`-values of the expressions on the y-axis.

```{r}
#| label: fig-boxplot_protein_expressions
#| fig-cap: "Output of the function `boxplot_protein_expressions()`. The plots show distribution of expression levels for each donor for the proteins (a) CD45RA and (b) CD8a."
#| fig-subcap: true
#| layout-ncol: 1

data_combined_tidy %>%
  boxplot_protein_expressions(plot_protein = "CD45RA")

data_combined_tidy %>%
  boxplot_protein_expressions(plot_protein = "CD8a")
```

# Shiny Integration {#sec-Shiny}

# References {.unnumbered}

# Appendix {#sec-Appendix}

## Appendix A {#sec-AppendixA}
