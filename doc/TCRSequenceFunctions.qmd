---
title: "Exploring CD8+ T-cell Specificities using Single Cell Immune Profiling with an Outlook to Reproducible Bio Data Science"
author: "William Hagedorn-Rasmussen"
format: html
toc: true
number-sections: true
crossref:
  chapters: true
csl: citation_style.csl
bibliography: bachelor_references.bib
editor: visual
---

# Imports {#sec-Import}

```{r setup}
library(TCRSequenceFunctions)
library(gt)
```

# Introduction {#sec-Intro}

This package, [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions), is a collection of functions made for working with data sets from a Single Cell Immune Profiling experiment made by 10x Genomics @10XGenomics2022. There is a total of four data sets which all follow the same general structure. They differ in that, they contain data from each their own respective donor.

The data sets contains binding counts between the donors' library of T-Cell Receptors (TCRs) and a set of peptide-major histocompatibility complexes (pMHCs). The before-mentioned binding counts are so called unique molecular identifier (UMI) counts. For an explanation of all columns see @sec-AppendixA.

In the following sections, each of the functions contained in [TCRSequenceFunctions](https://github.com/WilliamH-R/TCRSequenceFunctions) will be explained, demonstrated and reasoned for. Generally, they can be divided into three types: Cleaning, Augmenting and Modelling where the main goal of the two first is to make the data tidy.

Lastly will be a short section on a Shiny Package, [TCRSequenceShiny](https://github.com/WilliamH-R/TCRSequenceShiny), which utilizes these functions to make a user-friendly interactive interface for data exploration.

# Tidying the data {#sec-TidyData}

The aim of tidying the data is to enable the data handling, and to ensure a reproducible result. Firstly, the data is cleaned e.g. by making sure, all cells only contain one piece of information. Afterwards, some augmented was needed to enable the modelling. This was done by e.g. adding new columns. A wrapper function was used to run all the preparation functions: `run_all_prep()`. This wrapper simply takes one of the raw data files included in the package as input, and pipe it through all the preparation functions, and output tidy data as in @tbl-tidydata.

```{r}
#| label: tbl-tidydata
#| tbl-cap: "Tidy data created from raw file"

data_donor_one_raw %>%
  dplyr::slice_head(n = 10) %>% 
  run_all_prep() %>% 
  dplyr::slice_head(n = 10) %>% 
  gt()
```

## Cleaning {#sec-CleaningData}

As mentioned above, cleaning the data is mostly focusing on handling already present data and/or re-structure the data frame. The list of cleaning functions are as follows:

1.  `remove_unnecessary_columns()`
2.  `find_non_promiscuous_split_TCR_sequences()`
3.  `pivot_longer_TCR_sequences()`
4.  `add_chain_ident_remove_prefix()`
5.  `pivot_longer_pMHC()`
6.  `tidy_pMHC_names()`

The first function takes the raw data frame as input, and simply removes the unnecessary columns as these aren't needed. By default, the columns removed are those containing `"_binder"` and the column `"cell_clono_cdr3_nt"`.

`find_non_promiscuous_split_TCR_sequences()`, `pivot_longer_TCR_sequence()` and `add_chain_ident_remove_prefix()` works in close relation to each other. The purpose is to tidy the TCR-sequences, as to not have cells with multiple pieces of information. @tbl-TCR_sequence_example_before shows two examples as to how these are written. A column is added to indicate a non-promiscuous pair (a pair with one alpha- and beta chain respectively) and contains the TCR-sequence of said pair. This is done since the sequences of non-promiscuous pairs are needed for modelling in `relevant_binder_frequency_plot()`. The TCR-sequences are then split into new columns, one for each chain. These new columns are then pivot longer into the column `TCR_sequence` by `pivot_longer_TCR_sequence()`. Lastly, a new column as added to indicate chain type, `chain`, and the chain indicator `"TR[A|B]"` is removed. The result can be seen in @tbl-TCR_sequence_example_after.

```{r}
#| label: tbl-TCR_sequence_example_before
#| tbl-cap: "A snippet of `data_donor_one_raw` to show two examples as to how TCR-sequences are written"

data_donor_one_raw %>% 
  dplyr::slice_head(n = 3) %>%
  dplyr::select(cell_clono_cdr3_aa) %>%
  gt()
```

```{r}
#| label: tbl-TCR_sequence_example_after
#| tbl-cap: "A snippet of the output from `find_non_promiscuous_split_TCR_sequences()` to show a tidy version of the TCR-sequences"

data_donor_one_raw %>%
  dplyr::slice_head(n = 3) %>%
  find_non_promiscuous_split_TCR_sequences() %>% 
  pivot_longer_TCR_sequences() %>% 
  add_chain_ident_remove_prefix() %>% 
  dplyr::select(TCR_sequence, chain, non_promiscuous_pair) %>%
  gt()
```

## Augmenting {#sec-AugmentingData}

1.  `add_max_non_specific_binder()`
2.  `evaluate_binder()`
3.  `add_TCR_combination_identifier()`

## Change of dimensions

::: {#tbl-dimensions layout-ncol="2"}
|      **Donor 1**      |          **`raw`**           |          **`tidy`**           |
|:---------------------:|:----------------------------:|:-----------------------------:|
| **Number of columns** | `r ncol(data_donor_one_raw)` | `r ncol(data_donor_one_tidy)` |
|  **Number of rows**   | `r nrow(data_donor_one_raw)` | `r nrow(data_donor_one_tidy)` |

: {#tbl-dimensions_donor_one}

|      **Donor 2**      |          **`raw`**           |          **`tidy`**           |
|:---------------------:|:----------------------------:|:-----------------------------:|
| **Number of columns** | `r ncol(data_donor_two_raw)` | `r ncol(data_donor_two_tidy)` |
|  **Number of rows**   | `r nrow(data_donor_two_raw)` | `r nrow(data_donor_two_tidy)` |

: {#tbl-dimensions_donor_two}

|      **Donor 3**      |           **`raw`**            |           **`tidy`**            |
|:---------------------:|:------------------------------:|:-------------------------------:|
| **Number of columns** | `r ncol(data_donor_three_raw)` | `r ncol(data_donor_three_tidy)` |
|  **Number of rows**   | `r nrow(data_donor_three_raw)` | `r nrow(data_donor_three_tidy)` |

: {#tbl-dimensions_donor_three}

|      **Donor 4**      |           **`raw`**           |           **`tidy`**           |
|:---------------------:|:-----------------------------:|:------------------------------:|
| **Number of columns** | `r ncol(data_donor_four_raw)` | `r ncol(data_donor_four_tidy)` |
|  **Number of rows**   | `r nrow(data_donor_four_raw)` | `r nrow(data_donor_four_tidy)` |

: {#tbl-dimensions_donor_four}

Dimensions of data sets for **(a)** Donor 1, **(b)** Donor 2, **(c)** Donor 3 and **(d)** Donor 4 before and after being prepared by the wrapper `run_all_prep()`
:::

# Modelling {#sec-ModelData}

# Shiny Integration {#sec-Shiny}

# References {.unnumbered}

# Appendix {#sec-Appendix}

## Appendix A {#sec-AppendixA}
